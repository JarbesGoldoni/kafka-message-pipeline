version: '3.8'

services:
  # Zookeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - kafka-network

  # Input Backend Service
  input-service:
    build:
      context: ./input-service
      dockerfile: Dockerfile
    container_name: input-service
    ports:
      - "3001:3001"
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER=kafka:29092
      - PORT=3001
    networks:
      - kafka-network
    volumes:
      - ./input-service:/app
      - /app/node_modules

  # Message Listener Service
  listener-service:
    build:
      context: ./listener-service
      dockerfile: Dockerfile
    container_name: listener-service
    ports:
      - "3002:3002"
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER=kafka:29092
      - PORT=3002
    networks:
      - kafka-network
    volumes:
      - ./listener-service:/app
      - /app/node_modules

  # Nginx to serve static frontend files
  frontend:
    image: nginx:alpine
    container_name: frontend
    ports:
      - "8080:80"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - kafka-network

networks:
  kafka-network:
    driver: bridge